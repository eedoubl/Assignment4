{"ast":null,"code":"var _jsxFileName = \"/Users/eedoubl/info655-em879/src/components/PlaylistPt2.js\",\n  _s = $RefreshSig$();\n/**\n  PlaylistPt2.js\n  @author Ethan Mil\n  @version 1.0.0\n\n  A React component that defines a playlist that shuffles on page reload.\n*/\n\nimport React, { useEffect, useState } from 'react';\nimport Song from './Song';\nimport Podcast from './Podcast';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlaylistPt2 = () => {\n  _s();\n  const [audioTracks, setAudioTracks] = useState([]);\n  useEffect(() => {\n    const fetchAudioTracks = async () => {\n      try {\n        const response = await fetch('http://localhost:3001/tracks');\n        if (!response.ok) {\n          throw new Error('Failed to fetch data');\n        }\n        const data = await response.json();\n        setAudioTracks(data.tracks);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchAudioTracks();\n  }, []);\n  const renderAudioComponent = (item, index) => {\n    if ('title' in item && 'artist' in item && 'year' in item) {\n      return /*#__PURE__*/_jsxDEV(Song, {\n        title: item.title,\n        artist: item.artist,\n        year: item.year\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 14\n      }, this);\n    } else if ('episode' in item && 'episodeTitle' in item) {\n      return /*#__PURE__*/_jsxDEV(Podcast, {\n        episode: item.episode,\n        episodeTitle: item.episodeTitle,\n        season: item.season\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 14\n      }, this);\n    } else {\n      // Handle unrecognized audio format\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Unrecognized audio format\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 14\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Playlist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shuffled-playlist\",\n      children: audioTracks.map((item, index) => renderAudioComponent(item, index))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(PlaylistPt2, \"CB25sn/FpS2k0hoN3U/zKPcJQFQ=\");\n_c = PlaylistPt2;\nexport default PlaylistPt2;\nvar _c;\n$RefreshReg$(_c, \"PlaylistPt2\");","map":{"version":3,"names":["React","useEffect","useState","Song","Podcast","jsxDEV","_jsxDEV","PlaylistPt2","_s","audioTracks","setAudioTracks","fetchAudioTracks","response","fetch","ok","Error","data","json","tracks","error","console","renderAudioComponent","item","index","title","artist","year","fileName","_jsxFileName","lineNumber","columnNumber","episode","episodeTitle","season","children","className","map","_c","$RefreshReg$"],"sources":["/Users/eedoubl/info655-em879/src/components/PlaylistPt2.js"],"sourcesContent":["/**\n  PlaylistPt2.js\n  @author Ethan Mil\n  @version 1.0.0\n\n  A React component that defines a playlist that shuffles on page reload.\n*/\n\nimport React, { useEffect, useState } from 'react';\nimport Song from './Song';\nimport Podcast from './Podcast';\nimport '../App.css';\n\nconst PlaylistPt2 = () => {\n  const [audioTracks, setAudioTracks] = useState([]);\n\n  useEffect(() => {\n    const fetchAudioTracks = async () => {\n      try {\n        const response = await fetch('http://localhost:3001/tracks');\n        if (!response.ok) {\n          throw new Error('Failed to fetch data');\n        }\n        const data = await response.json();\n        setAudioTracks(data.tracks);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    fetchAudioTracks();\n  }, []);\n\n  const renderAudioComponent = (item, index) => {\n    if ('title' in item && 'artist' in item && 'year' in item) {\n      return <Song key={index} title={item.title} artist={item.artist} year={item.year} />;\n    } else if ('episode' in item && 'episodeTitle' in item) {\n      return <Podcast key={index} episode={item.episode} episodeTitle={item.episodeTitle} season={item.season} />;\n    } else {\n      // Handle unrecognized audio format\n      return <div key={index}>Unrecognized audio format</div>;\n    }\n  };\n\n  return (\n    <div>\n      <h2>Playlist</h2>\n      <div className=\"shuffled-playlist\">\n        {audioTracks.map((item, index) => renderAudioComponent(item, index))}\n      </div>\n    </div>\n  );\n};\n\nexport default PlaylistPt2;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAElDD,SAAS,CAAC,MAAM;IACd,MAAMU,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;QAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;QACzC;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCP,cAAc,CAACM,IAAI,CAACE,MAAM,CAAC;MAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDR,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMU,oBAAoB,GAAGA,CAACC,IAAI,EAAEC,KAAK,KAAK;IAC5C,IAAI,OAAO,IAAID,IAAI,IAAI,QAAQ,IAAIA,IAAI,IAAI,MAAM,IAAIA,IAAI,EAAE;MACzD,oBAAOhB,OAAA,CAACH,IAAI;QAAaqB,KAAK,EAAEF,IAAI,CAACE,KAAM;QAACC,MAAM,EAAEH,IAAI,CAACG,MAAO;QAACC,IAAI,EAAEJ,IAAI,CAACI;MAAK,GAA/DH,KAAK;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA4D,CAAC;IACtF,CAAC,MAAM,IAAI,SAAS,IAAIR,IAAI,IAAI,cAAc,IAAIA,IAAI,EAAE;MACtD,oBAAOhB,OAAA,CAACF,OAAO;QAAa2B,OAAO,EAAET,IAAI,CAACS,OAAQ;QAACC,YAAY,EAAEV,IAAI,CAACU,YAAa;QAACC,MAAM,EAAEX,IAAI,CAACW;MAAO,GAAnFV,KAAK;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAgF,CAAC;IAC7G,CAAC,MAAM;MACL;MACA,oBAAOxB,OAAA;QAAA4B,QAAA,EAAiB;MAAyB,GAAhCX,KAAK;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAgC,CAAC;IACzD;EACF,CAAC;EAED,oBACExB,OAAA;IAAA4B,QAAA,gBACE5B,OAAA;MAAA4B,QAAA,EAAI;IAAQ;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBxB,OAAA;MAAK6B,SAAS,EAAC,mBAAmB;MAAAD,QAAA,EAC/BzB,WAAW,CAAC2B,GAAG,CAAC,CAACd,IAAI,EAAEC,KAAK,KAAKF,oBAAoB,CAACC,IAAI,EAAEC,KAAK,CAAC;IAAC;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACtB,EAAA,CAvCID,WAAW;AAAA8B,EAAA,GAAX9B,WAAW;AAyCjB,eAAeA,WAAW;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}