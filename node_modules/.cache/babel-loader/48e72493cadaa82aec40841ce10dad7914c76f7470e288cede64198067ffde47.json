{"ast":null,"code":"var _jsxFileName = \"/Users/eedoubl/info655-em879/src/components/PlaylistPt2.js\",\n  _s = $RefreshSig$();\n/**\n  PlaylistPt2.js\n  @author Ethan Mil\n  @version 1.0.0\n\n  A React component that defines a playlist that shuffles on page reload.\n*/\n\nimport React, { useEffect, useState } from 'react';\nimport Song from './Song';\nimport Podcast from './Podcast';\nimport ShuffleButton from './Shuffle';\nimport PlayPauseButton from './PlayPause';\nimport PrevButton from './Prev';\nimport NextButton from './Next';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlaylistPt2 = () => {\n  _s();\n  const [playlist, setPlaylist] = useState([]);\n  const [currentTrackIndex, setCurrentTrackIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  useEffect(() => {\n    const fetchAudioTracks = async () => {\n      try {\n        const response = await fetch('http://localhost:3001/tracks');\n        if (!response.ok) {\n          throw new Error('Failed to fetch data');\n        }\n        const data = await response.json();\n        setPlaylist(data);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchAudioTracks();\n  }, []);\n  const handleShuffle = () => {\n    const shuffledPlaylist = shuffleArray([...playlist]);\n    setPlaylist(shuffledPlaylist);\n    setCurrentTrackIndex(0);\n  };\n  const handlePlayPause = () => {\n    setIsPlaying(!isPlaying);\n  };\n  const handlePrevTrack = () => {\n    setCurrentTrackIndex(prevIndex => prevIndex === 0 ? playlist.length - 1 : prevIndex - 1);\n  };\n  const handleNextTrack = () => {\n    setCurrentTrackIndex(prevIndex => prevIndex === playlist.length - 1 ? 0 : prevIndex + 1);\n  };\n  const shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Playlist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-controls\",\n      children: [/*#__PURE__*/_jsxDEV(ShuffleButton, {\n        onClick: handleShuffle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PlayPauseButton, {\n        isPlaying: isPlaying,\n        onClick: handlePlayPause\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PrevButton, {\n        onClick: handlePrevTrack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NextButton, {\n        onClick: handleNextTrack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shuffled-playlist\",\n      children: playlist.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"insert\",\n        style: {\n          padding: '1px',\n          backgroundColor: index === currentTrackIndex ? '#ccc' : 'transparent'\n        },\n        children: [item.title && item.artist && item.year && /*#__PURE__*/_jsxDEV(Song, {\n          title: item.title,\n          artist: item.artist,\n          year: item.year\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this), item.episode && item.episodeTitle && /*#__PURE__*/_jsxDEV(Podcast, {\n          episode: item.episode,\n          episodeTitle: item.episodeTitle,\n          season: item.season\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(PlaylistPt2, \"a6vkmUkuVxuMxPfBklyV73WeUPE=\");\n_c = PlaylistPt2;\nexport default PlaylistPt2;\nvar _c;\n$RefreshReg$(_c, \"PlaylistPt2\");","map":{"version":3,"names":["React","useEffect","useState","Song","Podcast","ShuffleButton","PlayPauseButton","PrevButton","NextButton","jsxDEV","_jsxDEV","PlaylistPt2","_s","playlist","setPlaylist","currentTrackIndex","setCurrentTrackIndex","isPlaying","setIsPlaying","fetchAudioTracks","response","fetch","ok","Error","data","json","error","console","handleShuffle","shuffledPlaylist","shuffleArray","handlePlayPause","handlePrevTrack","prevIndex","length","handleNextTrack","array","i","j","Math","floor","random","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","map","item","index","style","padding","backgroundColor","title","artist","year","episode","episodeTitle","season","_c","$RefreshReg$"],"sources":["/Users/eedoubl/info655-em879/src/components/PlaylistPt2.js"],"sourcesContent":["/**\n  PlaylistPt2.js\n  @author Ethan Mil\n  @version 1.0.0\n\n  A React component that defines a playlist that shuffles on page reload.\n*/\n\nimport React, { useEffect, useState } from 'react';\nimport Song from './Song';\nimport Podcast from './Podcast';\nimport ShuffleButton from './Shuffle';\nimport PlayPauseButton from './PlayPause';\nimport PrevButton from './Prev';\nimport NextButton from './Next';\nimport '../App.css';\n\nconst PlaylistPt2 = () => {\n  const [playlist, setPlaylist] = useState([]);\n  const [currentTrackIndex, setCurrentTrackIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  useEffect(() => {\n    const fetchAudioTracks = async () => {\n      try {\n        const response = await fetch('http://localhost:3001/tracks');\n        if (!response.ok) {\n          throw new Error('Failed to fetch data');\n        }\n        const data = await response.json();\n        setPlaylist(data);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    fetchAudioTracks();\n  }, []);\n\n  const handleShuffle = () => {\n    const shuffledPlaylist = shuffleArray([...playlist]);\n    setPlaylist(shuffledPlaylist);\n    setCurrentTrackIndex(0);\n  };\n\n  const handlePlayPause = () => {\n    setIsPlaying(!isPlaying);\n  };\n\n  const handlePrevTrack = () => {\n    setCurrentTrackIndex((prevIndex) => (prevIndex === 0 ? playlist.length - 1 : prevIndex - 1));\n  };\n\n  const handleNextTrack = () => {\n    setCurrentTrackIndex((prevIndex) => (prevIndex === playlist.length - 1 ? 0 : prevIndex + 1));\n  };\n\n  const shuffleArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n\n  return (\n    <div>\n      <h2>Playlist</h2>\n      <div className=\"player-controls\">\n        <ShuffleButton onClick={handleShuffle} />\n        <PlayPauseButton isPlaying={isPlaying} onClick={handlePlayPause} />\n        <PrevButton onClick={handlePrevTrack} />\n        <NextButton onClick={handleNextTrack} />\n      </div>\n      <div className=\"shuffled-playlist\">\n        {playlist.map((item, index) => (\n          <div key={index} className=\"insert\" style={{ padding: '1px', backgroundColor: index === currentTrackIndex ? '#ccc' : 'transparent' }}>\n            {item.title && item.artist && item.year && (\n              <Song title={item.title} artist={item.artist} year={item.year} />\n            )}\n            {item.episode && item.episodeTitle && (\n              <Podcast\n                episode={item.episode}\n                episodeTitle={item.episodeTitle}\n                season={item.season}\n              />\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default PlaylistPt2;\n\n\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}