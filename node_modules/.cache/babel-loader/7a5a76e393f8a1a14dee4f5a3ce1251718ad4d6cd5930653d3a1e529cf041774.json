{"ast":null,"code":"var _jsxFileName = \"/Users/eedoubl/info655-em879/src/components/PlaylistPt2.js\",\n  _s = $RefreshSig$();\n/**\n  PlaylistPt2.js\n  @author Ethan Mil\n  @version 1.0.0\n\n  A React component that defines a playlist that shuffles on page reload.\n*/\n\nimport React, { useEffect, useState } from 'react';\nimport AudioComponent from './AudioComponent';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlaylistPt2 = () => {\n  _s();\n  // State to hold the shuffled audio tracks\n  const [shuffledPlaylist, setShuffledPlaylist] = useState([]);\n\n  // Fetch audio tracks from JSON file when component mounts\n  useEffect(() => {\n    const fetchAudioTracks = async () => {\n      try {\n        const response = await fetch('http://localhost:3001/tracks');\n        const data = await response.json();\n        setShuffledPlaylist(data.tracks);\n      } catch (error) {\n        console.error('Error fetching audio tracks:', error);\n      }\n    };\n    fetchAudioTracks();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Playlist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shuffled-playlist\",\n      children: shuffledPlaylist.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"insert\",\n        style: {\n          padding: '1px'\n        },\n        children: /*#__PURE__*/_jsxDEV(AudioComponent, {\n          audio: item\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(PlaylistPt2, \"vx2Lh1IbHrvXvds02Q+FUihtPCc=\");\n_c = PlaylistPt2;\nexport default PlaylistPt2;\nvar _c;\n$RefreshReg$(_c, \"PlaylistPt2\");","map":{"version":3,"names":["React","useEffect","useState","AudioComponent","jsxDEV","_jsxDEV","PlaylistPt2","_s","shuffledPlaylist","setShuffledPlaylist","fetchAudioTracks","response","fetch","data","json","tracks","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","item","index","style","padding","audio","_c","$RefreshReg$"],"sources":["/Users/eedoubl/info655-em879/src/components/PlaylistPt2.js"],"sourcesContent":["/**\n  PlaylistPt2.js\n  @author Ethan Mil\n  @version 1.0.0\n\n  A React component that defines a playlist that shuffles on page reload.\n*/\n\nimport React, { useEffect, useState } from 'react';\nimport AudioComponent from './AudioComponent';\nimport '../App.css';\n\nconst PlaylistPt2 = () => {\n  // State to hold the shuffled audio tracks\n  const [shuffledPlaylist, setShuffledPlaylist] = useState([]);\n\n  // Fetch audio tracks from JSON file when component mounts\n  useEffect(() => {\n    const fetchAudioTracks = async () => {\n      try {\n        const response = await fetch('http://localhost:3001/tracks');\n        const data = await response.json();\n        setShuffledPlaylist(data.tracks);\n      } catch (error) {\n        console.error('Error fetching audio tracks:', error);\n      }\n    };\n\n    fetchAudioTracks();\n  }, []);\n\n  return (\n    <div>\n      <h2>Playlist</h2>\n      <div className=\"shuffled-playlist\">\n        {shuffledPlaylist.map((item, index) => (\n          <div key={index} className=\"insert\" style={{ padding: '1px'}}>\n            {/* Render each audio track using the AudioComponent */}\n            <AudioComponent audio={item} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default PlaylistPt2;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB;EACA,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAE5D;EACAD,SAAS,CAAC,MAAM;IACd,MAAMS,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;QAC5D,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCL,mBAAmB,CAACI,IAAI,CAACE,MAAM,CAAC;MAClC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD;IACF,CAAC;IAEDN,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBjB,OAAA;MAAKkB,SAAS,EAAC,mBAAmB;MAAAL,QAAA,EAC/BV,gBAAgB,CAACgB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBAChCrB,OAAA;QAAiBkB,SAAS,EAAC,QAAQ;QAACI,KAAK,EAAE;UAAEC,OAAO,EAAE;QAAK,CAAE;QAAAV,QAAA,eAE3Db,OAAA,CAACF,cAAc;UAAC0B,KAAK,EAAEJ;QAAK;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC,GAFvBI,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACf,EAAA,CAhCID,WAAW;AAAAwB,EAAA,GAAXxB,WAAW;AAkCjB,eAAeA,WAAW;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}