{"ast":null,"code":"var _jsxFileName = \"/Users/eedoubl/info655-em879/src/components/PlaylistPt2.js\",\n  _s = $RefreshSig$();\n/**\n  PlaylistPt2.js\n  @author Ethan Mil\n  @version 1.0.0\n\n  A React component that defines a playlist that shuffles on page reload.\n*/\n\nimport React, { useEffect, useState } from 'react';\nimport Song from './Song';\nimport Podcast from './Podcast';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlaylistPt2 = () => {\n  _s();\n  const [playlist, setPlaylist] = useState([]);\n  useEffect(() => {\n    const fetchAudioTracks = async () => {\n      try {\n        const response = await fetch('http://localhost:3001/tracks');\n        if (!response.ok) {\n          throw new Error('Failed to fetch data');\n        }\n        const data = await response.json();\n        const shuffledPlaylist = shuffleArray(data.tracks);\n        setPlaylist(shuffledPlaylist);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchAudioTracks();\n  }, []);\n  const shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Playlist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shuffled-playlist\",\n      children: playlist.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"insert\",\n        style: {\n          padding: '1px'\n        },\n        children: [item.title && item.artist && item.year && /*#__PURE__*/_jsxDEV(Song, {\n          title: item.title,\n          artist: item.artist,\n          year: item.year\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this), item.episode && item.episodeTitle && /*#__PURE__*/_jsxDEV(Podcast, {\n          episode: item.episode,\n          episodeTitle: item.episodeTitle,\n          season: item.season\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(PlaylistPt2, \"SfGHzpmtpLKztV2lxKmaYynPFKI=\");\n_c = PlaylistPt2;\nexport default PlaylistPt2;\nvar _c;\n$RefreshReg$(_c, \"PlaylistPt2\");","map":{"version":3,"names":["React","useEffect","useState","Song","Podcast","jsxDEV","_jsxDEV","PlaylistPt2","_s","playlist","setPlaylist","fetchAudioTracks","response","fetch","ok","Error","data","json","shuffledPlaylist","shuffleArray","tracks","error","console","array","i","length","j","Math","floor","random","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","item","index","style","padding","title","artist","year","episode","episodeTitle","season","_c","$RefreshReg$"],"sources":["/Users/eedoubl/info655-em879/src/components/PlaylistPt2.js"],"sourcesContent":["/**\n  PlaylistPt2.js\n  @author Ethan Mil\n  @version 1.0.0\n\n  A React component that defines a playlist that shuffles on page reload.\n*/\n\nimport React, { useEffect, useState } from 'react';\nimport Song from './Song';\nimport Podcast from './Podcast';\nimport '../App.css';\n\nconst PlaylistPt2 = () => {\n  const [playlist, setPlaylist] = useState([]);\n\n  useEffect(() => {\n    const fetchAudioTracks = async () => {\n      try {\n        const response = await fetch('http://localhost:3001/tracks');\n        if (!response.ok) {\n          throw new Error('Failed to fetch data');\n        }\n        const data = await response.json();\n        const shuffledPlaylist = shuffleArray(data.tracks);\n        setPlaylist(shuffledPlaylist);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    fetchAudioTracks();\n  }, []);\n\n  const shuffleArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n\n  return (\n    <div>\n      <h2>Playlist</h2>\n      <div className=\"shuffled-playlist\">\n        {playlist.map((item, index) => (\n          <div key={index} className=\"insert\" style={{ padding: '1px' }}>\n            {item.title && item.artist && item.year && (\n              <Song title={item.title} artist={item.artist} year={item.year} />\n            )}\n            {item.episode && item.episodeTitle && (\n              <Podcast\n                episode={item.episode}\n                episodeTitle={item.episodeTitle}\n                season={item.season}\n              />\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default PlaylistPt2;\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}